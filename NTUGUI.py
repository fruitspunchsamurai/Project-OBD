#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.7.2 on Thu Oct 19 13:15:16 2017
#

import wx
import cv2
import time
import sys
import subprocess
import os

#from multiprocessing.connection import Listener
import numpy as np

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade
#address = ('localhost', 6000)
#listener = Listener(address, authkey='secret password')
#conn = listener.accept()
#print 'connection accepted from', listener.last_accepted


c = cv2.VideoCapture(0)
c.set(3,320)
c.set(4,240)
time.sleep(2)


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.BORDER_NONE
        wx.Frame.__init__(self, *args, **kwds)
        #self.label_1 = wx.StaticText(self, wx.ID_ANY, ("SPEED"), style=wx.ALIGN_CENTER)
        #self.label_3 = wx.StaticText(self, wx.ID_ANY, ("9000"), style=wx.ALIGN_CENTER)
        self.bitmap_1 = wx.StaticBitmap(self, wx.ID_ANY, wx.Bitmap("/home/pi/Pictures/hive.jpg", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE)
        #self.label_2 = wx.StaticText(self, wx.ID_ANY, ("RPM"), style=wx.ALIGN_CENTER)
        #self.label_4 = wx.StaticText(self, wx.ID_ANY, ("98%"), style=wx.ALIGN_CENTER)
        self.rearCamera = wx.Button(self, wx.ID_ANY, ("Reverse Camera"))
        self.oBDStats = wx.Button(self, wx.ID_ANY, ("OBD Statistics"))
        self.GPSmodule = wx.Button(self, wx.ID_ANY, ("GPS Module"))

        ##self.imgSizer = (560, 315)
        ##self.pnl = wx.Panel(self)
        ##self.vbox = wx.BoxSizer(wx.VERTICAL)
        ##self.image = wx.EmptyImage(self.imgSizer[0], self.imgSizer[1])
        ##self.imageBit = wx.BitmapFromImage(self.image)
        ##self.staticBit = wx.StaticBitmap(self.pnl,wx.ID_ANY, self.imageBit)

        ##self.vbox.Add(self.staticBit)

        ##self.capture = cv2.VideoCapture(0)
        ##ret, self.frame = self.capture.read()
        ##if  ret:
        ##    self.bmp = wx.BitmapFromBuffer(self.width, self.height, self.frame)

        
        self.Bind(wx.EVT_CHAR_HOOK, self.OnKeyUP)
        self.oBDStats.Bind(wx.EVT_BUTTON, self.OBDsegment)
        self.rearCamera.Bind(wx.EVT_BUTTON, self.onClick)
        self.GPSmodule.Bind(wx.EVT_BUTTON, self.GPSsegment)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("frame_1")
        self.SetSize((800, 480))
        self.SetBackgroundColour(wx.Colour(1, 1, 1))
        #self.label_1.SetMinSize((100, 20))
        #self.label_1.SetBackgroundColour(wx.Colour(1, 1, 1))
        #self.label_1.SetForegroundColour(wx.Colour(255, 255, 255))
        #self.label_3.SetMinSize((100, 25))
        #self.label_3.SetBackgroundColour(wx.Colour(1, 1, 1))
        #self.label_3.SetForegroundColour(wx.Colour(255, 255, 255))
        self.bitmap_1.SetMinSize((800, 360))
        #self.label_2.SetMinSize((95, 20))
        #self.label_2.SetBackgroundColour(wx.Colour(1, 1, 1))
        #self.label_2.SetForegroundColour(wx.Colour(255, 255, 255))
        #self.label_4.SetMinSize((99, 25))
        #self.label_4.SetBackgroundColour(wx.Colour(1, 1, 1))
        #self.label_4.SetForegroundColour(wx.Colour(255, 255, 255))
        self.rearCamera.SetMinSize((250, 35))
        self.oBDStats.SetMinSize((250, 35))
        self.GPSmodule.SetMinSize((250, 35))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_7.Add((120, 135), 0, 0, 0)
        #sizer_7.Add(self.label_1, 0, wx.ALIGN_CENTER, 0)
        sizer_5.Add(sizer_7, 1, 0, 0)
        #sizer_9.Add(self.label_3, 0, wx.ALIGN_CENTER, 0)
        sizer_9.Add((120, 135), 0, 0, 0)
        sizer_5.Add(sizer_9, 1, 0, 0)
        sizer_3.Add(sizer_5, 1, 0, 0)
        sizer_3.Add(self.bitmap_1, 0, 0, 0)
        ##sizer_3.Add(staticBit, 0, 0, 0)
        sizer_1.Add((120, 135), 0, 0, 0)
        sizer_8.Add(sizer_1, 1, 0, 0)
        #sizer_8.Add(self.label_2, 0, wx.ALIGN_CENTER, 0)
        sizer_6.Add(sizer_8, 1, 0, 0)
        #sizer_10.Add(self.label_4, 0, wx.ALIGN_CENTER, 0)
        sizer_11.Add((120, 135), 0, 0, 0)
        sizer_10.Add(sizer_11, 1, 0, 0)
        sizer_6.Add(sizer_10, 1, 0, 0)
        sizer_3.Add(sizer_6, 1, 0, 0)
        sizer_2.Add(sizer_3, 3, 0, 0)
        sizer_4.Add(self.rearCamera, 0, wx.EXPAND, 0)
        sizer_4.Add((24, 20), 0, wx.SHAPED, 0)
        sizer_4.Add(self.GPSmodule, 0, wx.EXPAND, 0)
        sizer_4.Add((25, 20), 0, wx.SHAPED, 0)
        sizer_4.Add(self.oBDStats, 0, wx.EXPAND, 0)
        sizer_2.Add(sizer_4, 1, 0, 0)
        self.SetSizer(sizer_2)
        self.Layout()
        # end wxGlade

    def OnKeyUP(self, event):
        #print "KEY UP!"        
        keyCode = event.GetKeyCode()
        if keyCode == wx.WXK_ESCAPE:
            self.Close()
        event.Skip()
        
    def GPSsegment(self, event):
        cv2.namedWindow("OBD", cv2.WND_PROP_FULLSCREEN)
        cv2.setWindowProperty("OBD", cv2.WND_PROP_FULLSCREEN, cv2.cv.CV_WINDOW_FULLSCREEN)
        img = np.zeros((600,1000,3), np.uint8)
        cv2.rectangle(img,(980,580),(20,20),(255,255,255),3)
        font = cv2.FONT_HERSHEY_SIMPLEX
        cv2.putText(img,"GPS MODULE",(340,130),font,1.5,(255,255,255),2,3)
        cv2.imshow('OBD',img)
        
    
    def OBDsegment(self, event):
        os.system("python NTUobdtest.py")
        """img = np.zeros((512,512,3), np.uint8)
        cv2.rectangle(img,(384,0),(510,128),(255,255,255),3)
        cv2.imshow('OBD',img) 
        while 1:
            mt = wx.GetMouseState()
            if mt.LeftDown() == True:
                print "OBD Disabled"
                break
            if cv2.waitKey(5) == 27:
                print "OBD Disabled"
                break
            msg = conn.recv()
            check = isinstance(msg,(int,long))
            if check == True:
                print msg
        cv2.destroyAllWindows() 
     """   
    def onClick(self, event):
        cv2.namedWindow("ReverseCamera", cv2.WND_PROP_FULLSCREEN)
        cv2.setWindowProperty("ReverseCamera", cv2.WND_PROP_FULLSCREEN, cv2.cv.CV_WINDOW_FULLSCREEN)
        while(1):
            _,f = c.read()
            cv2.imshow('ReverseCamera',f)
            mx = wx.GetMouseState()
            if mx.LeftDown() == True:
                print "Camera Disabled"
                break
            if cv2.waitKey(5) == 27:
                print "Camera Disabled"
                break
            
        
        cv2.destroyAllWindows() 
        #c.release()
        
    #cv2.setMouseCallback('ReverseCamera',onClick)        
# end of class MyFrame


app = wx.App()
frame = MyFrame(None, wx.ID_ANY, " ")
app.SetTopWindow(frame)
frame.Show()
myCursor = wx.StockCursor(wx.CURSOR_BLANK)
frame.SetCursor(myCursor)

app.MainLoop()
